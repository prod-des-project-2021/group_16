@page "/games/{GameId:guid}"
@inject IJSRuntime JSRuntime
@inject IGameService GameService

@if (_gameInDetail == null && GameIsLoading)
{
    <Spinner />
}
else if (GameIsLoading is false)
{
    <div class="text-center mt-5">
        <p>Game not found!</p>
    </div>
}
<div hidden id="detail-game" class="container-fluid mt-md-5">
    <div class="row align-items-center justify-content-center">
        @if (_gameInDetail != null)
        {
            <div class="col-md-4">
                <div class="borderino @(_gameInDetail.Winner == null ? "loser" : "winner")">
                    <div class="text-center">
                        <h2>Game info</h2>
                    </div>
                    <p>Player's name: @_gameInDetail.FirstPlayer.Username</p>
                    <p>Color of pieces: @(_gameInDetail.WhitePiecesPlayer == null ? "Black" : "White")</p>
                    <p>Result: @(_gameInDetail.Winner == null ? "Loss" : "Win")</p>
                    <p>Date of the game: @_gameInDetail.Date</p>
                    <p>Duration of the game: @_gameInDetail.Duration</p>
                    <div class="text-center">
                        <a class="btn btn-primary" href="players/@_gameInDetail.FirstPlayer.PlayerId" 
                           role="button">View player's profile</a>
                    </div>
                </div>
            </div>
        }

        <div class="col-md-5">
            <div class="row">
                <div class="mx-auto" id="board" style="width: 500px" />
            </div>
            <div class="row justify-content-center">
                <button class="btn btn-primary mr-1 mt-2" disabled=@DisableButtonBackward @onclick="PreviousMove">Previous move</button>
                <button class="btn btn-primary ml-1 mt-2" disabled=@DisableButtonForward @onclick="NextMove">Next move</button>
            </div>
        </div>
    </div>
</div>


@code {

    private DetailGameDTO _gameInDetail { get; set; }

    [Parameter]
    public Guid GameId { get; set; }

    public IJSObjectReference JSGameModule { get; set; }

    public IJSObjectReference ChessBoard { get; set; }

    public string[] MovesInSANotation { get; set; }

    public int movePointer { get; set; } = 0;

    public bool lastMoveForward { get; set; }

    public bool DisableButtonForward { get; set; }

    public bool DisableButtonBackward { get; set; }

    public bool GameIsLoading { get; set; } = true;

    protected async override Task OnParametersSetAsync()
    {
        _gameInDetail = await GameService.GetDetailGame(GameId);

        if (_gameInDetail == null)
        {
            GameIsLoading = false;
        }
        else
        {
            MovesInSANotation = _gameInDetail.Moves.Split(":");

            DisableButtonBackward = true;

            if (MovesInSANotation.Length == 0)
            {
                DisableButtonForward = true;
            }

            JSGameModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/game.js");
            ChessBoard = await JSGameModule.InvokeAsync<IJSObjectReference>("createChessBoardReplay", "board");

            if (_gameInDetail.WhitePiecesPlayer == null)
            {
                await ChessBoard.InvokeVoidAsync("flip");
            }
            await JSRuntime.InvokeVoidAsync("showBoard");

        }

        await base.OnParametersSetAsync();
    }

    public async Task NextMove()
    {

        if (lastMoveForward == true)
        {
            movePointer++;
        }

        string piecesPositioning = await JSGameModule.InvokeAsync<string>("makeMove", MovesInSANotation[movePointer]);
        await ChessBoard.InvokeVoidAsync("position", piecesPositioning);

        lastMoveForward = true;
        DisableButtonBackward = false;

        if (movePointer == MovesInSANotation.Length - 1)
        {
            DisableButtonForward = true;
        }

    }

    public async Task PreviousMove()
    {
        if (lastMoveForward == false)
        {
            movePointer--;
        }

        string piecesPositioning = await JSGameModule.InvokeAsync<string>("undoMove");
        await ChessBoard.InvokeVoidAsync("position", piecesPositioning);

        lastMoveForward = false;
        DisableButtonForward = false;

        if (movePointer == 0)
        {
            DisableButtonBackward = true;
        }
    }

}
